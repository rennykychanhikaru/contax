# ==========================================
# SECURITY WARNING
# ==========================================
# This is a template file. Copy it to .env.local and fill in your actual values.
# NEVER commit .env.local or any file with real credentials to version control!
# 
# To use this file:
# 1. Copy: cp .env.example .env.local
# 2. Fill in your actual values in .env.local
# 3. Keep .env.local private and secure
# ==========================================

# OpenAI Configuration
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-proj-YOUR_OPENAI_API_KEY_HERE
OPENAI_REALTIME_MODEL=gpt-4o-realtime-preview

# Supabase Configuration
# For local development, these are the default Supabase local values
# For production, get these from: https://supabase.com/dashboard/project/_/settings/api
NEXT_PUBLIC_SUPABASE_URL=http://127.0.0.1:54321
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Google Calendar OAuth
# Set up OAuth 2.0 credentials at: https://console.cloud.google.com/apis/credentials
# IMPORTANT: Add your redirect URI to the authorized redirect URIs in Google Cloud Console
GOOGLE_CLIENT_ID=your_google_client_id_here.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your_google_client_secret_here
GOOGLE_OAUTH_REDIRECT=http://localhost:3000/api/google/oauth/callback

# Google Calendar Access Token (Optional - for testing)
# This is typically obtained through OAuth flow, not manually set
GOOGLE_CALENDAR_ACCESS_TOKEN=

# Webhook Configuration (Optional)
# For local development with external webhook testing, use a tunneling service:
# 1. Install ngrok: brew install ngrok
# 2. Run: ngrok http 3000
# 3. Set WEBHOOK_BASE_URL to the ngrok URL (e.g., https://abc123.ngrok.io)
WEBHOOK_BASE_URL=

# For production, set this to your domain:
# NEXT_PUBLIC_APP_URL=https://yourdomain.com

# Supabase Service Role Key (SENSITIVE - Use with caution)
# This key bypasses Row Level Security - only use for admin operations
# Get this from: https://supabase.com/dashboard/project/_/settings/api
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key_here

# Twilio Media Streams Auth (short-lived token)
# Used to sign and verify the <Connect><Stream> auth parameter.
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('base64url'))"
STREAM_AUTH_SECRET=

# Webhook Security Configuration
# Generate a secure key with: openssl rand -hex 32
# This key is used to encrypt webhook secrets in the database
WEBHOOK_ENCRYPTION_KEY=your_32_byte_hex_key_here_64_characters_total

# Rate limiting configuration (optional)
# Default: 10 requests per minute, 100 per hour
WEBHOOK_DEFAULT_RATE_LIMIT_MINUTE=10
WEBHOOK_DEFAULT_RATE_LIMIT_HOUR=100

# Maximum consecutive webhook failures before auto-disable
WEBHOOK_MAX_FAILURES=5

# ==========================================
# SECURITY REMINDERS
# ==========================================
# 1. NEVER commit this file with real values
# 2. Rotate keys immediately if exposed
# 3. Use different keys for development and production
# 4. Enable key restrictions where possible (IP, domain, etc.)
# 5. Monitor API usage for unusual activity
# ==========================================
