"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(home)/page",{

/***/ "(app-pages-browser)/./lib/agent/openai-realtime.ts":
/*!**************************************!*\
  !*** ./lib/agent/openai-realtime.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIRealtimeAgent: () => (/* binding */ OpenAIRealtimeAgent)\n/* harmony export */ });\nclass OpenAIRealtimeAgent {\n    setCalendarIds(ids) {\n        this.calendarIds = ids && ids.length ? [\n            ...ids\n        ] : undefined;\n    }\n    requireTool(name) {\n        // Cancel any current generation and require a tool call\n        try {\n            this.sendOAI({\n                type: 'response.cancel'\n            });\n        } catch (e) {\n        // Error handled\n        }\n        const instructions = name === 'slots' ? 'User asked for day availability. Call getAvailableSlots with the requested date (YYYY-MM-DD). Do not state times unless they come from the tool result.' : 'User asked for a specific time. Call checkAvailability with start at that exact local time and end=start+60 minutes (unless user specified a duration). Do not speak availability before tool result.';\n        this.sendOAI({\n            type: 'response.create',\n            response: {\n                instructions,\n                tool_choice: 'required',\n                modalities: [\n                    'audio',\n                    'text'\n                ]\n            }\n        });\n        this.awaitingTool = true;\n        if (this.awaitingToolTimer) clearTimeout(this.awaitingToolTimer);\n        this.awaitingToolTimer = setTimeout(()=>{\n            if (this.awaitingTool) {\n                // Re-prompt once\n                this.sendOAI({\n                    type: 'response.create',\n                    response: {\n                        instructions,\n                        tool_choice: 'required',\n                        modalities: [\n                            'audio',\n                            'text'\n                        ]\n                    }\n                });\n            }\n        }, 2000);\n        // Fallback after 3500ms for specific-time queries: parse transcript and call API directly\n        if (name === 'check') {\n            if (this.fallbackTimer) clearTimeout(this.fallbackTimer);\n            this.fallbackTimer = setTimeout(()=>{\n                if (!this.awaitingTool) return;\n                const parsed = this.parseSlotFromTranscript(this.lastTranscript, this.tz);\n                if (!parsed) return;\n                const organizationId = this.defaultOrgId;\n                const calendarId = this.defaultCalendarId;\n                const agentId = this.defaultAgentId;\n                const apiUrl = agentId ? \"/api/agents/\".concat(agentId, \"/calendar/check-availability\") : '/api/calendar/check-availability';\n                fetch(apiUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        organizationId,\n                        start: parsed.start,\n                        end: parsed.end,\n                        calendarId,\n                        calendarIds: this.calendarIds\n                    })\n                }).then(async (r)=>({\n                        ok: r.ok,\n                        j: await r.json().catch(()=>({}))\n                    })).then((param)=>{\n                    let { ok, j } = param;\n                    this.awaitingTool = false;\n                    if (ok && (j === null || j === void 0 ? void 0 : j.available) === true) {\n                        this.speak(\"That time is available: \".concat(this.fmtRange(j.start || parsed.start, j.end || parsed.end, j.timeZone || this.tz), \". Should I book it?\"));\n                    } else if (ok && (j === null || j === void 0 ? void 0 : j.available) === false) {\n                        const date = (j.start || parsed.start).slice(0, 10);\n                        const slotsApiUrl = agentId ? \"/api/agents/\".concat(agentId, \"/calendar/slots\") : '/api/calendar/slots';\n                        fetch(slotsApiUrl, {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({\n                                date,\n                                slotMinutes: 60,\n                                calendarIds: this.calendarIds\n                            })\n                        }).then(async (r2)=>({\n                                ok2: r2.ok,\n                                j2: await r2.json().catch(()=>({}))\n                            })).then((param)=>{\n                            let { ok2, j2 } = param;\n                            if (ok2 && Array.isArray(j2 === null || j2 === void 0 ? void 0 : j2.slots) && j2.slots.length) {\n                                const list = j2.slots.slice(0, 5).map((it)=>this.fmtRange(it.start, it.end, j2.timeZone || this.tz)).join(', ');\n                                this.speak(\"That time is not available. Here are some options: \".concat(list, \".\"));\n                            } else {\n                                this.speak('That time is not available and I could not retrieve alternative slots.');\n                            }\n                        });\n                    } else {\n                        this.speak('I could not verify that time just now.');\n                    }\n                }).catch(()=>this.speak('I could not verify that time just now.'));\n            }, 3500);\n        }\n    }\n    speak(text) {\n        var // Report what we're trying to say\n        _this_onToolEvent, _this;\n        // Try to cancel any ongoing response first\n        try {\n            this.sendOAI({\n                type: 'response.cancel'\n            });\n        } catch (e) {\n        // Error handled\n        }\n        (_this_onToolEvent = (_this = this).onToolEvent) === null || _this_onToolEvent === void 0 ? void 0 : _this_onToolEvent.call(_this, {\n            kind: 'event',\n            type: 'spoken',\n            text\n        });\n        // Tell OpenAI to speak EXACTLY this text\n        const exactInstructions = 'Say exactly this and nothing else: \"'.concat(text.replace(/\"/g, '\\\\\"'), '\"');\n        this.sendOAI({\n            type: 'response.create',\n            response: {\n                instructions: exactInstructions,\n                modalities: [\n                    'audio',\n                    'text'\n                ]\n            }\n        });\n    }\n    parseSlotFromTranscript(transcript) {\n        // Simple time parser for fallback - tries to extract a time from the transcript\n        const timeMatch = transcript.match(/\\b(\\d{1,2})(?::(\\d{2}))?\\s?(am|pm|AM|PM)?\\b/i);\n        if (!timeMatch) return null;\n        try {\n            const hours = parseInt(timeMatch[1]);\n            const minutes = parseInt(timeMatch[2] || '0');\n            const isPM = /pm/i.test(timeMatch[3] || '');\n            let hour24 = hours;\n            if (isPM && hours !== 12) hour24 += 12;\n            if (!isPM && hours === 12) hour24 = 0;\n            const now = new Date();\n            const slotDate = new Date(now);\n            slotDate.setHours(hour24, minutes, 0, 0);\n            // If time is in the past, assume tomorrow\n            if (slotDate < now) {\n                slotDate.setDate(slotDate.getDate() + 1);\n            }\n            const endDate = new Date(slotDate);\n            endDate.setHours(endDate.getHours() + 1);\n            return {\n                start: slotDate.toISOString(),\n                end: endDate.toISOString()\n            };\n        } catch (e) {\n            return null;\n        }\n    }\n    fmtTime(iso, tz) {\n        try {\n            const d = new Date(iso);\n            const fmt = new Intl.DateTimeFormat('en-US', {\n                timeZone: tz,\n                hour: '2-digit',\n                minute: '2-digit'\n            });\n            return fmt.format(d);\n        } catch (e) {\n            return iso;\n        }\n    }\n    fmtRange(startIso, endIso, tz) {\n        return \"\".concat(this.fmtTime(startIso, tz), \" â€“ \").concat(this.fmtTime(endIso, tz));\n    }\n    async connect(systemPrompt, opts) {\n        var _session_client_secret;\n        const session = await fetch('/api/realtime/token', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                systemPrompt,\n                organizationId: opts === null || opts === void 0 ? void 0 : opts.organizationId,\n                calendarId: (opts === null || opts === void 0 ? void 0 : opts.calendarId) || 'primary',\n                greeting: opts === null || opts === void 0 ? void 0 : opts.greeting,\n                language: (opts === null || opts === void 0 ? void 0 : opts.language) || 'en-US',\n                timeZone: opts === null || opts === void 0 ? void 0 : opts.timeZone\n            })\n        }).then((r)=>r.json());\n        if (!(session === null || session === void 0 ? void 0 : (_session_client_secret = session.client_secret) === null || _session_client_secret === void 0 ? void 0 : _session_client_secret.value) || !(session === null || session === void 0 ? void 0 : session.model)) {\n            throw new Error('Failed to obtain Realtime session');\n        }\n        this.defaultOrgId = opts === null || opts === void 0 ? void 0 : opts.organizationId;\n        this.defaultCalendarId = (opts === null || opts === void 0 ? void 0 : opts.calendarId) || 'primary';\n        this.defaultAgentId = opts === null || opts === void 0 ? void 0 : opts.agentId;\n        this.tz = opts === null || opts === void 0 ? void 0 : opts.timeZone;\n        const pc = new RTCPeerConnection();\n        this.pc = pc;\n        pc.ontrack = (e)=>{\n            const [stream] = e.streams;\n            this.audioEl.srcObject = stream;\n            this.audioEl.play().catch(()=>{});\n        };\n        // Receive events from OpenAI\n        pc.ondatachannel = (event)=>{\n            const channel = event.channel;\n            if (channel.label !== 'oai-events') return;\n            // Prefer the inbound channel if OpenAI creates it.\n            this.attachDataChannel(channel);\n        };\n        const dc = pc.createDataChannel('oai-events');\n        this.attachDataChannel(dc);\n        this.mic = await navigator.mediaDevices.getUserMedia({\n            audio: true\n        });\n        this.mic.getTracks().forEach((t)=>pc.addTrack(t, this.mic));\n        const offer = await pc.createOffer();\n        await pc.setLocalDescription(offer);\n        const baseUrl = 'https://api.openai.com/v1/realtime';\n        const sdpResponse = await fetch(\"\".concat(baseUrl, \"?model=\").concat(encodeURIComponent(session.model)), {\n            method: 'POST',\n            headers: {\n                Authorization: \"Bearer \".concat(session.client_secret.value),\n                'Content-Type': 'application/sdp',\n                'OpenAI-Beta': 'realtime=v1'\n            },\n            body: offer.sdp\n        });\n        if (!sdpResponse.ok) {\n            const txt = await sdpResponse.text();\n            throw new Error(\"Realtime SDP error: \".concat(sdpResponse.status, \" \").concat(txt));\n        }\n        const answer = {\n            type: 'answer',\n            sdp: await sdpResponse.text()\n        };\n        await pc.setRemoteDescription(answer);\n        // Speak the explicit greeting first (if provided), without jumping into scheduling yet\n        if (opts === null || opts === void 0 ? void 0 : opts.greeting) {\n            const safe = opts.greeting.replace(/\"/g, '\\\\\"');\n            const greetOnly = 'Say exactly: \"'.concat(safe, '\". Then stop speaking and wait for the caller to respond.');\n            this.sendOAI({\n                type: 'response.create',\n                response: {\n                    instructions: greetOnly,\n                    modalities: [\n                        'audio',\n                        'text'\n                    ]\n                }\n            });\n        }\n    }\n    async disconnect() {\n        var _this_pc, _this_mic;\n        try {\n            this.sendOAI({\n                type: 'response.cancel'\n            });\n        } catch (e) {\n        // Error handled\n        }\n        (_this_pc = this.pc) === null || _this_pc === void 0 ? void 0 : _this_pc.close();\n        this.pc = null;\n        (_this_mic = this.mic) === null || _this_mic === void 0 ? void 0 : _this_mic.getTracks().forEach((t)=>t.stop());\n        this.mic = null;\n        this.toolArgsBuffers.clear();\n        this.dataChannel = null;\n        this.pendingMessages = [];\n    }\n    async invokeTool(callId, name, argsJson) {\n        let args = {};\n        try {\n            args = argsJson ? JSON.parse(argsJson) : {};\n        } catch (e) {\n            // If parsing fails, return an error result\n            await this.sendToolResult(callId, {\n                error: 'Invalid tool arguments'\n            });\n            return;\n        }\n        try {\n            var _this_onToolEvent, _this;\n            // Heuristic mapping if model omitted the function name\n            let effective = name;\n            if (!effective || effective === 'unknown') {\n                if (args && typeof args === 'object') {\n                    if (args.start && args.end && !args.customer) effective = 'checkAvailability';\n                    else if (args.start && args.end && args.customer) effective = 'bookAppointment';\n                    else if (args.date) effective = 'getAvailableSlots';\n                }\n            }\n            (_this_onToolEvent = (_this = this).onToolEvent) === null || _this_onToolEvent === void 0 ? void 0 : _this_onToolEvent.call(_this, {\n                kind: 'call',\n                name: effective || name,\n                args: argsJson\n            });\n            if (effective === 'checkAvailability') {\n                var _this_onToolEvent1, _this1;\n                const organizationId = args.organizationId || this.defaultOrgId;\n                const calendarId = args.calendarId || this.defaultCalendarId;\n                if (!args.start || !args.end) {\n                    await this.sendToolResult(callId, {\n                        error: 'Missing start/end'\n                    });\n                    return;\n                }\n                const res = await (async ()=>{\n                    const agentId = this.defaultAgentId;\n                    const apiUrl = agentId ? \"/api/agents/\".concat(agentId, \"/calendar/check-availability\") : '/api/calendar/check-availability';\n                    const r = await fetch(apiUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            organizationId,\n                            start: args.start,\n                            end: args.end,\n                            calendarId,\n                            calendarIds: this.calendarIds\n                        })\n                    });\n                    try {\n                        const j = await r.json();\n                        return r.ok ? j : {\n                            error: 'http_error',\n                            status: r.status,\n                            detail: j\n                        };\n                    } catch (e) {\n                        const t = await r.text().catch(()=>'');\n                        return {\n                            error: 'http_error',\n                            status: r.status,\n                            detail: t\n                        };\n                    }\n                })();\n                (_this_onToolEvent1 = (_this1 = this).onToolEvent) === null || _this_onToolEvent1 === void 0 ? void 0 : _this_onToolEvent1.call(_this1, {\n                    kind: 'result',\n                    name: effective,\n                    result: res\n                });\n                // Process the result and prepare our response BEFORE sending tool result\n                let spokenResponse = '';\n                try {\n                    if ((res === null || res === void 0 ? void 0 : res.error) === 'broad_window') {\n                        // Don't speak, just trigger slots tool\n                        await this.sendToolResult(callId, res);\n                        this.requireTool('slots');\n                        return;\n                    } else if ((res === null || res === void 0 ? void 0 : res.available) === true) {\n                        const tz = res === null || res === void 0 ? void 0 : res.timeZone;\n                        const s = (res === null || res === void 0 ? void 0 : res.start) || args.start;\n                        const e = (res === null || res === void 0 ? void 0 : res.end) || args.end;\n                        spokenResponse = \"Yes, \".concat(this.fmtRange(s, e, tz), \" is available. Would you like me to book it?\");\n                    } else if ((res === null || res === void 0 ? void 0 : res.available) === false) {\n                        var _j_slots;\n                        const tz = res === null || res === void 0 ? void 0 : res.timeZone;\n                        const requestedStart = (res === null || res === void 0 ? void 0 : res.start) || args.start;\n                        const requestedEnd = (res === null || res === void 0 ? void 0 : res.end) || args.end;\n                        const requestedTime = this.fmtRange(requestedStart, requestedEnd, tz);\n                        // Get alternative slots for the same day\n                        const date = requestedStart.slice(0, 10);\n                        const agentId = this.defaultAgentId;\n                        const slotsApiUrl = agentId ? \"/api/agents/\".concat(agentId, \"/calendar/slots\") : '/api/calendar/slots';\n                        const r2 = await fetch(slotsApiUrl, {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json'\n                            },\n                            body: JSON.stringify({\n                                date,\n                                slotMinutes: 60,\n                                calendarIds: this.calendarIds\n                            })\n                        });\n                        let j = null;\n                        try {\n                            j = await r2.json();\n                        } catch (e) {\n                        // Error handled\n                        }\n                        if (r2.ok && (j === null || j === void 0 ? void 0 : (_j_slots = j.slots) === null || _j_slots === void 0 ? void 0 : _j_slots.length)) {\n                            const tz2 = j.timeZone;\n                            try {\n                                var _this_onSlots, _this2;\n                                (_this_onSlots = (_this2 = this).onSlots) === null || _this_onSlots === void 0 ? void 0 : _this_onSlots.call(_this2, j.slots, tz2);\n                            } catch (e) {\n                            // Error handled\n                            }\n                            const list = j.slots.slice(0, 5).map((it)=>this.fmtRange(it.start, it.end, tz2)).join(', ');\n                            spokenResponse = \"Sorry, \".concat(requestedTime, \" is not available. The available times that day are: \").concat(list, \".\");\n                        } else {\n                            spokenResponse = \"Sorry, \".concat(requestedTime, \" is not available and I could not retrieve alternative slots for that day.\");\n                        }\n                    }\n                } catch (e) {\n                // Error handled\n                }\n                // Send tool result with suppression flag, then speak our response\n                await this.sendToolResult(callId, res, true);\n                if (spokenResponse) {\n                    this.speak(spokenResponse);\n                }\n            } else if (effective === 'bookAppointment') {\n                var _this_onToolEvent2, _this3;\n                const organizationId = args.organizationId || this.defaultOrgId;\n                const calendarId = args.calendarId || this.defaultCalendarId;\n                if (!organizationId) {\n                    await this.sendToolResult(callId, {\n                        error: 'Missing organizationId'\n                    });\n                    return;\n                }\n                const res = await (async ()=>{\n                    const agentId = this.defaultAgentId;\n                    const apiUrl = agentId ? \"/api/agents/\".concat(agentId, \"/appointments/book\") : '/api/appointments/book';\n                    const r = await fetch(apiUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            organizationId,\n                            customer: args.customer,\n                            start: args.start,\n                            end: args.end,\n                            notes: args.notes,\n                            calendarId\n                        })\n                    });\n                    try {\n                        const j = await r.json();\n                        return r.ok ? j : {\n                            error: 'http_error',\n                            status: r.status,\n                            detail: j\n                        };\n                    } catch (e) {\n                        const t = await r.text().catch(()=>'');\n                        return {\n                            error: 'http_error',\n                            status: r.status,\n                            detail: t\n                        };\n                    }\n                })();\n                (_this_onToolEvent2 = (_this3 = this).onToolEvent) === null || _this_onToolEvent2 === void 0 ? void 0 : _this_onToolEvent2.call(_this3, {\n                    kind: 'result',\n                    name: effective,\n                    result: res\n                });\n                // Prepare response before sending tool result\n                let spokenResponse = '';\n                try {\n                    if ((res === null || res === void 0 ? void 0 : res.error) === 'conflict') {\n                        spokenResponse = 'That time is busy. Would you like me to suggest alternatives?';\n                    } else if (res === null || res === void 0 ? void 0 : res.appointment) {\n                        const tz = res === null || res === void 0 ? void 0 : res.timeZone;\n                        const s = (res === null || res === void 0 ? void 0 : res.start) || args.start;\n                        const e = (res === null || res === void 0 ? void 0 : res.end) || args.end;\n                        spokenResponse = \"Perfect! I've booked \".concat(this.fmtRange(s, e, tz), \" for you. It's now on your calendar.\");\n                    }\n                } catch (e) {\n                // Error handled\n                }\n                await this.sendToolResult(callId, res, true);\n                if (spokenResponse) {\n                    this.speak(spokenResponse);\n                }\n            } else if (effective === 'getAvailableSlots') {\n                var _this_onToolEvent3, _this4;\n                const organizationId = args.organizationId || this.defaultOrgId;\n                const res = await (async ()=>{\n                    const agentId = this.defaultAgentId;\n                    const apiUrl = agentId ? \"/api/agents/\".concat(agentId, \"/calendar/slots\") : '/api/calendar/slots';\n                    const r = await fetch(apiUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            organizationId,\n                            date: args.date,\n                            slotMinutes: args.slotMinutes,\n                            businessHours: args.businessHours,\n                            calendarIds: this.calendarIds\n                        })\n                    });\n                    try {\n                        const j = await r.json();\n                        return r.ok ? j : {\n                            error: 'http_error',\n                            status: r.status,\n                            detail: j\n                        };\n                    } catch (e) {\n                        const t = await r.text().catch(()=>'');\n                        return {\n                            error: 'http_error',\n                            status: r.status,\n                            detail: t\n                        };\n                    }\n                })();\n                (_this_onToolEvent3 = (_this4 = this).onToolEvent) === null || _this_onToolEvent3 === void 0 ? void 0 : _this_onToolEvent3.call(_this4, {\n                    kind: 'result',\n                    name: effective,\n                    result: res\n                });\n                // Prepare response before sending tool result\n                let spokenResponse = '';\n                try {\n                    if (Array.isArray(res === null || res === void 0 ? void 0 : res.slots)) {\n                        const tz = res === null || res === void 0 ? void 0 : res.timeZone;\n                        try {\n                            var _this_onSlots1, _this5;\n                            (_this_onSlots1 = (_this5 = this).onSlots) === null || _this_onSlots1 === void 0 ? void 0 : _this_onSlots1.call(_this5, res.slots, tz);\n                        } catch (e) {\n                        // Error handled\n                        }\n                        if (res.slots.length === 0) {\n                            spokenResponse = 'No free slots found that day.';\n                        } else {\n                            const list = res.slots.slice(0, 5).map((it)=>this.fmtRange(it.start, it.end, tz)).join(', ');\n                            spokenResponse = \"Available times are: \".concat(list, \".\");\n                        }\n                    } else if (res === null || res === void 0 ? void 0 : res.error) {\n                        spokenResponse = 'I could not retrieve the day availability at the moment.';\n                    }\n                } catch (e) {\n                // Error handled\n                }\n                await this.sendToolResult(callId, res, true);\n                if (spokenResponse) {\n                    this.speak(spokenResponse);\n                }\n            } else {\n                var _this_onToolEvent4, _this6;\n                const err = {\n                    error: \"Unknown tool \".concat(name || 'unknown')\n                };\n                (_this_onToolEvent4 = (_this6 = this).onToolEvent) === null || _this_onToolEvent4 === void 0 ? void 0 : _this_onToolEvent4.call(_this6, {\n                    kind: 'result',\n                    name,\n                    result: err\n                });\n                await this.sendToolResult(callId, err);\n            }\n        } catch (e) {\n            var _this_onToolEvent5, _this7;\n            const err = {\n                error: e.message\n            };\n            (_this_onToolEvent5 = (_this7 = this).onToolEvent) === null || _this_onToolEvent5 === void 0 ? void 0 : _this_onToolEvent5.call(_this7, {\n                kind: 'result',\n                name,\n                result: err\n            });\n            await this.sendToolResult(callId, err);\n        }\n    }\n    async sendToolResult(callId, result) {\n        let suppressResponse = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        // Provide tool output to the model\n        const createItem = {\n            type: 'conversation.item.create',\n            item: {\n                type: 'function_call_output',\n                call_id: callId,\n                output: JSON.stringify(result)\n            }\n        };\n        this.sendOAI(createItem);\n        // If we're going to speak deterministically, tell the AI to be quiet\n        if (suppressResponse) {\n            // Add a system message to prevent AI from speaking\n            const suppressMsg = {\n                type: 'conversation.item.create',\n                item: {\n                    type: 'message',\n                    role: 'system',\n                    content: [\n                        {\n                            type: 'text',\n                            text: 'Tool result has been processed. Agent will speak the response.'\n                        }\n                    ]\n                }\n            };\n            this.sendOAI(suppressMsg);\n        }\n    }\n    attachDataChannel(channel) {\n        this.dataChannel = channel;\n        channel.onmessage = (ev)=>this.handleOAIEvent(ev.data);\n        channel.onopen = ()=>{\n            // Flush any queued messages once channel is open\n            if (this.pendingMessages.length) {\n                for (const msg of this.pendingMessages){\n                    try {\n                        channel.send(JSON.stringify(msg));\n                    } catch (e) {\n                    // ignore send failures\n                    }\n                }\n                this.pendingMessages = [];\n            }\n        };\n    }\n    sendOAI(msg) {\n        const dc = this.dataChannel;\n        const payload = JSON.stringify(msg);\n        if (dc && dc.readyState === 'open') {\n            try {\n                dc.send(payload);\n            } catch (e) {\n                // If send fails unexpectedly, queue it for retry on next open\n                this.pendingMessages.push(msg);\n            }\n        } else {\n            this.pendingMessages.push(msg);\n        }\n    }\n    constructor(opts){\n        this.pc = null;\n        this.mic = null;\n        this.currentAgentTranscript = '';\n        this.toolArgsBuffers = new Map();\n        this.dataChannel = null;\n        this.pendingMessages = [];\n        this.toolHintSent = false;\n        this.awaitingTool = false;\n        this.awaitingToolTimer = null;\n        this.fallbackTimer = null;\n        this.lastTranscript = '';\n        this.handleOAIEvent = (raw)=>{\n            try {\n                const msg = typeof raw === 'string' ? JSON.parse(raw) : raw;\n                // Lightweight debug logging to help diagnose tool calling\n                if (msg === null || msg === void 0 ? void 0 : msg.type) {\n                    const k = msg.type;\n                    if (k.startsWith('response.function_call') || k.startsWith('response.output_text') || k === 'transcript') {\n                        var _this_onToolEvent, _this;\n                        // eslint-disable-next-line no-console\n                        console.debug('[oai]', k);\n                        (_this_onToolEvent = (_this = this).onToolEvent) === null || _this_onToolEvent === void 0 ? void 0 : _this_onToolEvent.call(_this, {\n                            kind: 'event',\n                            type: k\n                        });\n                    }\n                }\n                // Simple transcript tap if present\n                if (msg.type === 'transcript') {\n                    this.lastTranscript = msg.text;\n                    if (this.onTranscript) this.onTranscript(msg.text);\n                    // After first user transcript, arm tool usage with explicit guidance (once)\n                    if (!this.toolHintSent) {\n                        const toolHint = \"Use tools for scheduling. When the caller mentions a specific time, call checkAvailability with start at that exact local time and end=start+60 minutes (unless the user requested a different duration). Do not check a whole day when a specific time was requested. If checkAvailability shows conflicts, do not proceed to booking; propose the next free times. Format dates as RFC3339 with timezone (e.g., 2025-09-10T10:00:00-04:00). Default organizationId=\".concat(this.defaultOrgId || 'unknown', \", calendarId=\").concat(this.defaultCalendarId || 'primary', \".\");\n                        this.sendOAI({\n                            type: 'response.create',\n                            response: {\n                                instructions: toolHint,\n                                tool_choice: 'auto',\n                                modalities: [\n                                    'audio',\n                                    'text'\n                                ]\n                            }\n                        });\n                        this.toolHintSent = true;\n                    }\n                    // Heuristic: day availability question -> require getAvailableSlots\n                    const t = msg.text.toLowerCase();\n                    const hasTime = /\\b(\\d{1,2})(?::(\\d{2}))?\\s?(am|pm)?\\b/.test(t) || /\\bnoon\\b|\\bmidnight\\b/.test(t);\n                    const dayQuery = /\\b(today|tomorrow|monday|tuesday|wednesday|thursday|friday|saturday|sunday|this\\s+week|availability|free|open)\\b/.test(t);\n                    if (dayQuery && !hasTime) this.requireTool('slots');\n                    if (hasTime) this.requireTool('check');\n                }\n                // Handle agent (assistant) transcript events\n                if (msg.type === 'response.started') {\n                    // Clear transcript when a new response starts\n                    this.currentAgentTranscript = '';\n                }\n                if (msg.type === 'response.audio_transcript.delta') {\n                    const delta = msg.delta || '';\n                    this.currentAgentTranscript += delta;\n                    if (this.onAgentTranscript) {\n                        this.onAgentTranscript(this.currentAgentTranscript, false);\n                    }\n                }\n                if (msg.type === 'response.audio_transcript.done') {\n                    const final = msg.transcript || this.currentAgentTranscript;\n                    this.currentAgentTranscript = '';\n                    if (this.onAgentTranscript) {\n                        this.onAgentTranscript(final, true);\n                    }\n                }\n                // Also handle text output events (when audio is disabled)\n                if (msg.type === 'response.text.delta') {\n                    const delta = msg.delta || '';\n                    this.currentAgentTranscript += delta;\n                    if (this.onAgentTranscript) {\n                        this.onAgentTranscript(this.currentAgentTranscript, false);\n                    }\n                }\n                if (msg.type === 'response.text.done') {\n                    const final = msg.text || this.currentAgentTranscript;\n                    this.currentAgentTranscript = '';\n                    if (this.onAgentTranscript) {\n                        this.onAgentTranscript(final, true);\n                    }\n                }\n                // Tool calling (function calling) handlers â€“ support current and legacy event names\n                if (msg.type === 'response.function_call.created') {\n                    // Capture the function name early so later delta/done events can find it\n                    const callId = msg.call_id || msg.id;\n                    const name = msg.name || 'unknown';\n                    if (callId) {\n                        var _this_onToolEvent1, _this1;\n                        const cur = this.toolArgsBuffers.get(callId) || {\n                            name,\n                            args: ''\n                        };\n                        cur.name = name;\n                        this.toolArgsBuffers.set(callId, cur);\n                        (_this_onToolEvent1 = (_this1 = this).onToolEvent) === null || _this_onToolEvent1 === void 0 ? void 0 : _this_onToolEvent1.call(_this1, {\n                            kind: 'event',\n                            type: 'response.function_call.created'\n                        });\n                    }\n                }\n                if (msg.type === 'response.function_call.arguments.delta' || msg.type === 'response.function_call_arguments.delta') {\n                    var _this_toolArgsBuffers_get;\n                    this.awaitingTool = false;\n                    const callId = msg.call_id || msg.id;\n                    var _this_toolArgsBuffers_get_name;\n                    const name = msg.name || ((_this_toolArgsBuffers_get_name = (_this_toolArgsBuffers_get = this.toolArgsBuffers.get(callId)) === null || _this_toolArgsBuffers_get === void 0 ? void 0 : _this_toolArgsBuffers_get.name) !== null && _this_toolArgsBuffers_get_name !== void 0 ? _this_toolArgsBuffers_get_name : 'unknown');\n                    const delta = msg.delta || '';\n                    if (!callId) return;\n                    const cur = this.toolArgsBuffers.get(callId) || {\n                        name,\n                        args: ''\n                    };\n                    cur.args += delta;\n                    cur.name = name;\n                    this.toolArgsBuffers.set(callId, cur);\n                }\n                if (msg.type === 'response.function_call.arguments.done' || msg.type === 'response.function_call_arguments.done') {\n                    this.awaitingTool = false;\n                    const callId = msg.call_id || msg.id;\n                    if (!callId) return;\n                    const buf = this.toolArgsBuffers.get(callId);\n                    if (!buf) return;\n                    // eslint-disable-next-line no-console\n                    console.debug('[oai] function_call.complete', buf.name);\n                    this.invokeTool(callId, buf.name, buf.args);\n                }\n                if (msg.type === 'response.function_call.completed') {\n                    var _this_toolArgsBuffers_get1;\n                    this.awaitingTool = false;\n                    // Some backends emit a single completed event with full arguments\n                    const callId = msg.call_id || msg.id;\n                    const name = msg.name || 'unknown';\n                    const args = msg.arguments || ((_this_toolArgsBuffers_get1 = this.toolArgsBuffers.get(callId || '')) === null || _this_toolArgsBuffers_get1 === void 0 ? void 0 : _this_toolArgsBuffers_get1.args) || '';\n                    if (!callId) return;\n                    // eslint-disable-next-line no-console\n                    console.debug('[oai] function_call.completed', name);\n                    this.invokeTool(callId, name, args);\n                }\n            } catch (e) {\n            // ignore parse errors\n            }\n        };\n        this.audioEl = new Audio();\n        this.onTranscript = opts === null || opts === void 0 ? void 0 : opts.onTranscript;\n        this.onAgentTranscript = opts === null || opts === void 0 ? void 0 : opts.onAgentTranscript;\n        this.onToolEvent = opts === null || opts === void 0 ? void 0 : opts.onToolEvent;\n        this.onSlots = opts === null || opts === void 0 ? void 0 : opts.onSlots;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/agent/openai-realtime.ts\n"));

/***/ })

});