// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/agent-settings" | "/auth/sign-in" | "/auth/sign-up" | "/onboarding" | "/settings"
type AppRouteHandlerRoutes = "/api/agents" | "/api/agents/[agent_id]/appointments/book" | "/api/agents/[agent_id]/calendar/check-availability" | "/api/agents/[agent_id]/calendar/list" | "/api/agents/[agent_id]/calendar/oauth/start" | "/api/agents/[agent_id]/calendar/slots" | "/api/agents/[agent_id]/calendar/status" | "/api/agents/default" | "/api/appointments/book" | "/api/calendar/check-availability" | "/api/calendar/list" | "/api/calendar/oauth/agent-callback" | "/api/calendar/slots" | "/api/calendar/status" | "/api/calendar/token" | "/api/google/oauth/callback" | "/api/google/oauth/start" | "/api/onboarding" | "/api/org/default" | "/api/realtime/token" | "/api/settings/twilio" | "/api/settings/webhook" | "/api/test-env" | "/api/webhook/[userId]/[token]" | "/api/webhook/agent/[token]/trigger" | "/api/webhook/agent/[token]/twiml" | "/api/webhook/call-status" | "/api/webhook/org/[token]/trigger-call" | "/api/webhook/outgoing-call" | "/api/webhook/trigger-call" | "/auth/callback"
type PageRoutes = never
type LayoutRoutes = "/" | "/auth"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/agent-settings": {}
  "/api/agents": {}
  "/api/agents/[agent_id]/appointments/book": { "agent_id": string; }
  "/api/agents/[agent_id]/calendar/check-availability": { "agent_id": string; }
  "/api/agents/[agent_id]/calendar/list": { "agent_id": string; }
  "/api/agents/[agent_id]/calendar/oauth/start": { "agent_id": string; }
  "/api/agents/[agent_id]/calendar/slots": { "agent_id": string; }
  "/api/agents/[agent_id]/calendar/status": { "agent_id": string; }
  "/api/agents/default": {}
  "/api/appointments/book": {}
  "/api/calendar/check-availability": {}
  "/api/calendar/list": {}
  "/api/calendar/oauth/agent-callback": {}
  "/api/calendar/slots": {}
  "/api/calendar/status": {}
  "/api/calendar/token": {}
  "/api/google/oauth/callback": {}
  "/api/google/oauth/start": {}
  "/api/onboarding": {}
  "/api/org/default": {}
  "/api/realtime/token": {}
  "/api/settings/twilio": {}
  "/api/settings/webhook": {}
  "/api/test-env": {}
  "/api/webhook/[userId]/[token]": { "userId": string; "token": string; }
  "/api/webhook/agent/[token]/trigger": { "token": string; }
  "/api/webhook/agent/[token]/twiml": { "token": string; }
  "/api/webhook/call-status": {}
  "/api/webhook/org/[token]/trigger-call": { "token": string; }
  "/api/webhook/outgoing-call": {}
  "/api/webhook/trigger-call": {}
  "/auth": {}
  "/auth/callback": {}
  "/auth/sign-in": {}
  "/auth/sign-up": {}
  "/onboarding": {}
  "/settings": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/auth": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
