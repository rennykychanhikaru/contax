// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/(home)/page.tsx
{
  const handler = {} as typeof import("../../app/(home)/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/agent-settings/page.tsx
{
  const handler = {} as typeof import("../../app/agent-settings/page.js")
  handler satisfies AppPageConfig<"/agent-settings">
}

// Validate ../../app/auth/sign-in/page.tsx
{
  const handler = {} as typeof import("../../app/auth/sign-in/page.js")
  handler satisfies AppPageConfig<"/auth/sign-in">
}

// Validate ../../app/auth/sign-up/page.tsx
{
  const handler = {} as typeof import("../../app/auth/sign-up/page.js")
  handler satisfies AppPageConfig<"/auth/sign-up">
}

// Validate ../../app/onboarding/page.tsx
{
  const handler = {} as typeof import("../../app/onboarding/page.js")
  handler satisfies AppPageConfig<"/onboarding">
}

// Validate ../../app/settings/page.tsx
{
  const handler = {} as typeof import("../../app/settings/page.js")
  handler satisfies AppPageConfig<"/settings">
}

// Validate ../../app/api/agents/[agent_id]/appointments/book/route.ts
{
  const handler = {} as typeof import("../../app/api/agents/[agent_id]/appointments/book/route.js")
  handler satisfies RouteHandlerConfig<"/api/agents/[agent_id]/appointments/book">
}

// Validate ../../app/api/agents/[agent_id]/calendar/check-availability/route.ts
{
  const handler = {} as typeof import("../../app/api/agents/[agent_id]/calendar/check-availability/route.js")
  handler satisfies RouteHandlerConfig<"/api/agents/[agent_id]/calendar/check-availability">
}

// Validate ../../app/api/agents/[agent_id]/calendar/list/route.ts
{
  const handler = {} as typeof import("../../app/api/agents/[agent_id]/calendar/list/route.js")
  handler satisfies RouteHandlerConfig<"/api/agents/[agent_id]/calendar/list">
}

// Validate ../../app/api/agents/[agent_id]/calendar/oauth/start/route.ts
{
  const handler = {} as typeof import("../../app/api/agents/[agent_id]/calendar/oauth/start/route.js")
  handler satisfies RouteHandlerConfig<"/api/agents/[agent_id]/calendar/oauth/start">
}

// Validate ../../app/api/agents/[agent_id]/calendar/slots/route.ts
{
  const handler = {} as typeof import("../../app/api/agents/[agent_id]/calendar/slots/route.js")
  handler satisfies RouteHandlerConfig<"/api/agents/[agent_id]/calendar/slots">
}

// Validate ../../app/api/agents/[agent_id]/calendar/status/route.ts
{
  const handler = {} as typeof import("../../app/api/agents/[agent_id]/calendar/status/route.js")
  handler satisfies RouteHandlerConfig<"/api/agents/[agent_id]/calendar/status">
}

// Validate ../../app/api/agents/default/route.ts
{
  const handler = {} as typeof import("../../app/api/agents/default/route.js")
  handler satisfies RouteHandlerConfig<"/api/agents/default">
}

// Validate ../../app/api/agents/route.ts
{
  const handler = {} as typeof import("../../app/api/agents/route.js")
  handler satisfies RouteHandlerConfig<"/api/agents">
}

// Validate ../../app/api/appointments/book/route.ts
{
  const handler = {} as typeof import("../../app/api/appointments/book/route.js")
  handler satisfies RouteHandlerConfig<"/api/appointments/book">
}

// Validate ../../app/api/calendar/check-availability/route.ts
{
  const handler = {} as typeof import("../../app/api/calendar/check-availability/route.js")
  handler satisfies RouteHandlerConfig<"/api/calendar/check-availability">
}

// Validate ../../app/api/calendar/list/route.ts
{
  const handler = {} as typeof import("../../app/api/calendar/list/route.js")
  handler satisfies RouteHandlerConfig<"/api/calendar/list">
}

// Validate ../../app/api/calendar/oauth/agent-callback/route.ts
{
  const handler = {} as typeof import("../../app/api/calendar/oauth/agent-callback/route.js")
  handler satisfies RouteHandlerConfig<"/api/calendar/oauth/agent-callback">
}

// Validate ../../app/api/calendar/slots/route.ts
{
  const handler = {} as typeof import("../../app/api/calendar/slots/route.js")
  handler satisfies RouteHandlerConfig<"/api/calendar/slots">
}

// Validate ../../app/api/calendar/status/route.ts
{
  const handler = {} as typeof import("../../app/api/calendar/status/route.js")
  handler satisfies RouteHandlerConfig<"/api/calendar/status">
}

// Validate ../../app/api/calendar/token/route.ts
{
  const handler = {} as typeof import("../../app/api/calendar/token/route.js")
  handler satisfies RouteHandlerConfig<"/api/calendar/token">
}

// Validate ../../app/api/google/oauth/callback/route.ts
{
  const handler = {} as typeof import("../../app/api/google/oauth/callback/route.js")
  handler satisfies RouteHandlerConfig<"/api/google/oauth/callback">
}

// Validate ../../app/api/google/oauth/start/route.ts
{
  const handler = {} as typeof import("../../app/api/google/oauth/start/route.js")
  handler satisfies RouteHandlerConfig<"/api/google/oauth/start">
}

// Validate ../../app/api/onboarding/route.ts
{
  const handler = {} as typeof import("../../app/api/onboarding/route.js")
  handler satisfies RouteHandlerConfig<"/api/onboarding">
}

// Validate ../../app/api/org/default/route.ts
{
  const handler = {} as typeof import("../../app/api/org/default/route.js")
  handler satisfies RouteHandlerConfig<"/api/org/default">
}

// Validate ../../app/api/realtime/token/route.ts
{
  const handler = {} as typeof import("../../app/api/realtime/token/route.js")
  handler satisfies RouteHandlerConfig<"/api/realtime/token">
}

// Validate ../../app/api/settings/twilio/route.ts
{
  const handler = {} as typeof import("../../app/api/settings/twilio/route.js")
  handler satisfies RouteHandlerConfig<"/api/settings/twilio">
}

// Validate ../../app/api/settings/webhook/route.ts
{
  const handler = {} as typeof import("../../app/api/settings/webhook/route.js")
  handler satisfies RouteHandlerConfig<"/api/settings/webhook">
}

// Validate ../../app/api/test-env/route.ts
{
  const handler = {} as typeof import("../../app/api/test-env/route.js")
  handler satisfies RouteHandlerConfig<"/api/test-env">
}

// Validate ../../app/api/webhook/[userId]/[token]/route.ts
{
  const handler = {} as typeof import("../../app/api/webhook/[userId]/[token]/route.js")
  handler satisfies RouteHandlerConfig<"/api/webhook/[userId]/[token]">
}

// Validate ../../app/api/webhook/agent/[token]/trigger-call/route.ts
{
  const handler = {} as typeof import("../../app/api/webhook/agent/[token]/trigger-call/route.js")
  handler satisfies RouteHandlerConfig<"/api/webhook/agent/[token]/trigger-call">
}

// Validate ../../app/api/webhook/agent/[token]/trigger/route.ts
{
  const handler = {} as typeof import("../../app/api/webhook/agent/[token]/trigger/route.js")
  handler satisfies RouteHandlerConfig<"/api/webhook/agent/[token]/trigger">
}

// Validate ../../app/api/webhook/agent/[token]/twiml/route.ts
{
  const handler = {} as typeof import("../../app/api/webhook/agent/[token]/twiml/route.js")
  handler satisfies RouteHandlerConfig<"/api/webhook/agent/[token]/twiml">
}

// Validate ../../app/api/webhook/call-status/route.ts
{
  const handler = {} as typeof import("../../app/api/webhook/call-status/route.js")
  handler satisfies RouteHandlerConfig<"/api/webhook/call-status">
}

// Validate ../../app/api/webhook/org/[token]/trigger-call/route.ts
{
  const handler = {} as typeof import("../../app/api/webhook/org/[token]/trigger-call/route.js")
  handler satisfies RouteHandlerConfig<"/api/webhook/org/[token]/trigger-call">
}

// Validate ../../app/api/webhook/outgoing-call/route.ts
{
  const handler = {} as typeof import("../../app/api/webhook/outgoing-call/route.js")
  handler satisfies RouteHandlerConfig<"/api/webhook/outgoing-call">
}

// Validate ../../app/api/webhook/trigger-call/route.ts
{
  const handler = {} as typeof import("../../app/api/webhook/trigger-call/route.js")
  handler satisfies RouteHandlerConfig<"/api/webhook/trigger-call">
}

// Validate ../../app/auth/callback/route.ts
{
  const handler = {} as typeof import("../../app/auth/callback/route.js")
  handler satisfies RouteHandlerConfig<"/auth/callback">
}





// Validate ../../app/(home)/layout.tsx
{
  const handler = {} as typeof import("../../app/(home)/layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ../../app/auth/layout.tsx
{
  const handler = {} as typeof import("../../app/auth/layout.js")
  handler satisfies LayoutConfig<"/auth">
}

// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
